#include "standard_metrics_configs.fcl"
#include "routing_master_parameters.fcl"

services: {
  scheduler: {
    errorOnFailureToPut: false
  }
  NetMonTransportServiceInterface: {
    service_provider: NetMonTransportService
    #broadcast_sends: true
    destinations: {	}

    routing_table_config: @local::artdaq_EB_routing_table_specification
  }
}

daq: {
  event_builder: {
    expected_fragments_per_event: 0  # Will be set by DAQInterface
    max_fragment_size_bytes: 16777216
    use_art: true
    print_event_store_stats: true
    buffer_count: 20
    max_incomplete_events: 75 # Same as boardreader sync interval
    verbose: true
    send_requests: true

    routing_token_config: @local::artdaq_EB_routing_token_specification

    sources: { }
  }
  metrics: @local::EB_metrics_default
} 

outputs: {
  rootNetOutput: {
    module_type: RootNetOutput
    #SelectEvents: { SelectEvents: [ pmod2,pmod3 ] }
  }
}

physics: {
  analyzers: {
    toy1Integ: {
      module_type: CheckIntegrity
      raw_data_label: "daq"
      frag_type: "TOY1"      
    }
    toy2Integ: {
      module_type: CheckIntegrity
      raw_data_label: "daq"
      frag_type: "TOY2"
    }
  }

  producers: { }

  filters: {
    prescaleMod2: {
       module_type: NthEvent
       nth: 2
    }
    prescaleMod3: {
       module_type: NthEvent
       nth: 3
    }
  }

  pmod2: [ prescaleMod2 ]
  pmod3: [ prescaleMod3 ]
   
  a1: [ toy1Integ, toy2Integ ]
  my_output_modules: [ rootNetOutput ]
}
source: {
  module_type: DemoInput
  waiting_time: 2500000
  resume_after_timeout: true
}
process_name: DAQ
