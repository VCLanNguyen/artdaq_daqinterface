BEGIN_PROLOG

component_standard: {
  fragment_receiver: {
	mpi_sync_interval: 50

	# CommandableFragmentGenerator Configuration: 
	fragment_ids: []
	fragment_id: -99 # Please define only one of these

	sleep_on_stop_us: 0

	 # Possible values are: Ignored, Single, Buffer, Window
	request_mode: "Single"

	data_buffer_depth_fragments: 1000
	data_buffer_depth_mb: 1000

	request_port: 3001
	request_address: "227.128.12.26" # Multicast request address

	# Request message contains tzero. Window will be from tzero -
	# offset to tzero + width

	request_window_offset: 0 
	request_window_width: 0

	# How long to wait before discarding request messages that are
        # outside the available data
	
	stale_request_timeout: "0xFFFFFFFF" 
	
	# If request windows are unique, avoids a copy operation, but
	# the same data point cannot be used for two requests. If this
	# is not anticipated, leave set to "true"

	request_windows_are_unique: true 

	# separate_data_thread MUST be true for requests to be
        # applied! If requests are not desired, but a separate readout
        # thread is, set this to true and request_mode to ignored.

	separate_data_thread: true

	# Whether a thread should be started which periodically calls
        # checkHWStatus_, a user-defined function which should be used
        # to check hardware status registers and report to MetricMan:

	separate_monitoring_thread: false 

	# How often, in microseconds, checkHWStatus_() should be
        # called. 0 to disable:

	hardware_poll_interval_us: 0 

        generator: ToySimulator
	  fragment_type: TOY1
	  starting_fragment_id: 0
	  random_seed: 8250
	  sleep_on_stop_us: 0 
	  nADCcounts: 40
	  throttle_usecs: 10000
	  distribution_type: 1
	  timestamp_scale_factor: 1

        destinations: { }

	use_routing_master: false
  }

  metrics: {
	brFile: {
	  metricPluginType: "file"
	  level: 3
	  fileName: "/tmp/boardreader/br_%UID%_metrics.log"
	  uniquify: true
	}
  }
}

component01_standard: @local::component_standard  
component01_standard.fragment_receiver.fragment_id: 0  
component01_standard.fragment_receiver.board_id: 0  
 
component02_standard: @local::component_standard  
component02_standard.fragment_receiver.fragment_id: 1  
component02_standard.fragment_receiver.board_id: 1  
 
component03_standard: @local::component_standard  
component03_standard.fragment_receiver.fragment_id: 2  
component03_standard.fragment_receiver.board_id: 2  
 
component04_standard: @local::component_standard  
component04_standard.fragment_receiver.fragment_id: 3  
component04_standard.fragment_receiver.board_id: 3  
 
component05_standard: @local::component_standard  
component05_standard.fragment_receiver.fragment_id: 4  
component05_standard.fragment_receiver.board_id: 4  
 
component06_standard: @local::component_standard  
component06_standard.fragment_receiver.fragment_id: 5  
component06_standard.fragment_receiver.board_id: 5  
 
component07_standard: @local::component_standard  
component07_standard.fragment_receiver.fragment_id: 6  
component07_standard.fragment_receiver.board_id: 6  
 
component08_standard: @local::component_standard  
component08_standard.fragment_receiver.fragment_id: 7  
component08_standard.fragment_receiver.board_id: 7  
 
component09_standard: @local::component_standard  
component09_standard.fragment_receiver.fragment_id: 8  
component09_standard.fragment_receiver.board_id: 8  

END_PROLOG
