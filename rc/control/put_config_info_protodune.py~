

def put_config_info_base(self):

    # JCF, Nov-11-2016

    # The hardwired paths below are specific to pdunedaq01; these will
    # need to be changed on another system
    
    proddir = "/home/nfs/products"
    configbasedir = "/home/nfs/dunedaq/daqarea/config_protodune"
    runnum = str(self.run_params["run_number"])
    runrecord = self.record_directory + "/" + runnum
    

    cmds = []
    cmds.append( "cd %s" % (configbasedir) )
    cmds.append( ". %s/setup" % (proddir))
    cmds.append( "setup artdaq v1_13_02 -q e10:eth:prof:s35")
    cmds.append( "tmpdir=$(uuidgen)")
    cmds.append( "cd $tmpdir" )
    cmds.append( "cp -rp " + runrecord + " . ")
    cmds.append( "chmod 777 " + runrecord )
    cmds.append( "rm -f " + runrecord + "/*.txt")
    cmds.append( "conftool.sh -o import_global_config -g demo1R%d -v ver001 -s %d" % 
                 (runnum, runnum) )
    cmds.append( "cd ..")
    cmds.append( "rm -rf $tmpdir ")

    cmd = " ; ".join( cmds )

    print "THE PUT_CONFIG_INFO COMMAND IS: \"%s\"" % (cmd)
    return

    # proc = Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # cfg_lines = proc.stdout.readlines()
    
    # if len(cfg_lines) == 0:
    #     print "Error: No lines of output"
    #     self.alert_and_recover("Error: No lines of output from execution of the following: \"%s\"" % \
    #                                (cmd) )
    #     return "", []

    # if ( "Return status: succeed" in cfg_lines[-1]):
    #     configdir = "%s/newconfig/" % (configbasedir)
    #     return configdir, [ configdir ]
    # else:
    #     print "Error, the output was \"%s\"" % ("".join( cfg_lines ))
    #     self.alert_and_recover("Error: execution of the following \"%s\" resulted in "
    #                            "the following output: \"%s\"" % (cmd, "".join( cfg_lines )))
    #     return "", []
